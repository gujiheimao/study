package com.gujiheimao.study.se.se02;

/**
 * 02.这里是类的基本语法
 */
public class _02_BaseGrammar {
    /**
     * 在jvm中执行此代码的过程如下：
     *
     * 1. 加载字节码文件：JVM通过类加载器加载当前类的字节码文件，解析类的信息并生成一个Class对象。
     *
     * 2. 进行静态初始化：JVM对类进行静态初始化，执行静态变量赋值、静态代码块等。在本例中由于没有这些内容，因此直接跳过静态初始化。
     *
     * 3. 执行main方法：JVM从字节码文件中定位到main方法，并创建该方法的栈帧。栈帧中包含了该方法的参数、局部变量和返回值等信息。
     *
     * 4. 执行sum方法：在main方法中调用sum方法，JVM会创建sum方法的栈帧，并传入参数a和b的值。sum方法会计算a和b的和，并返回结果。
     *
     * 5. 执行println方法：在main方法中调用println方法，JVM会创建println方法的栈帧，并传入参数sum的值。println方法会将sum的值输出到控制台。
     *
     * 6. 返回main方法：当println方法执行完成后，JVM会将控制权返回到main方法的栈帧中，并将sum的值赋给sum变量。
     *
     * 7. 结束程序：当main方法执行完成后，JVM会释放该方法的栈帧，并结束程序的运行。
     */

    /**
     * 从编译到jvm虚拟机再到硬件执行的过程（大致）
     * 1.当开发人员执行`javac xxx.java`的时候，会由java编译器javac将xxx.java文件编译成xxx.class文件
     * 2.当执行`java xxx`的时候，会由java虚拟机jvm将xxx.class文件加载到内存中，并生产一个Class对象
     * 3.进行静态初始化：JVM对类进行静态初始化，执行静态变量赋值、静态代码块等。在本例中由于没有这些内容，因此直接跳过静态初始化。
     * 4.执行main方法：JVM从字节码文件中定位到main方法，并在栈中压入一个main方法栈帧。
     * 5.在 main方法栈帧 中创建了a，b，sum三个局部变量变量，然后将155，99，0分别赋值给a，b，sum。因为sum是在执行sum方法之后才会有值的，所以这里先将sum赋值为0
     * 6.执行sum方法：在main方法中调用sum方法，JVM会向栈中压入sum方法栈帧，并传入参数a和b的值。sum方法会计算a和b的和，并返回结果。
     * 7.将返回的结果，赋值给sum变量
     * 8.执行println方法：在main方法栈帧中调用println方法，JVM会向栈中压入println方法栈帧，并传入参数sum的值。println方法会将sum的值输出到控制台。
     * 9.返回main方法：当println方法执行完成后，JVM会将控制权返回到main方法的栈帧中，并将sum的值赋给sum变量。
     * 10.结束程序：当main方法执行完成后，JVM会释放该方法的栈帧，并结束程序的运行。
     *
     */


    /**
     *
     *
     *
     * 这里定义的是一个main方法，它是程序的入口
     *
     * 这里面调用了两个方法，一个是sum方法，一个是println方法
     * 程序启动的时候，会加载出来一块方法区，栈帧以及堆内存
     * 然后会在方法区中创建出一个main方法的栈帧，
     * 在这个栈帧中会创建出一个局部变量表，用来存储方法中的局部变量，也就是方法中的参数和方法中的变量
     * 然后会在其中创建a，b，sum三个变量，然后将155，99，0分别赋值给a，b，sum
     * 之后执行方法的时候，会将sum方法压入到栈帧中，然后执行sum方法，执行结束之后，将sum方法从栈帧中弹出
     * 并将sum方法的返回值赋值给sum变量
     * 最后再将
     *
     * @param args
     */
    public static void main(String[] args) {
        /**
         * 这创建了一个基本数据类型a，它是一个整数类型，赋值为155
         * 他的格式是 数据类型 变量名 = 值;
         * 这里需要注意的是，一个变量必须具有一个个类型，而且这个类型是不可变的
         * 同时这个变量创建之后需要在最末端加上分号
         * 可以同时创建多个变量
         * `int a,b,c;
         * a=155;
         * b=99;
         * `
         * 也可以这么做
         * `int a=155,b=99,c=88;`
         * 都能创建变量，并进行赋值
         * 如果变量没有赋值，那么它的值就是默认值，int的默认值是0
         *
         */
        int a = 155;
        //这创建了另外一个基本数据类型b，它是一个整数类型，赋值为99
        int b = 99;
        //调用sum方法，将a和b的值传递给sum方法，然后将sum方法的返回值赋值给sum变量
        int sum = sum(a, b);
        //最后调用println方法，将sum的值传递给println方法，然后将sum的值打印到控制台
        println(sum);
    }

    /**
     * 这里定义的是一个println方法，它是用来打印字符串的
     * 可以向里面传递一个参数，再将这个参数打印到控制台
     * <p>
     * 这个方法是public修饰的，静态方法，没有返回值
     * 可以在main函数中直接调用
     *
     * @param obj
     */
    public static void println(Object obj) {
        System.out.println(obj);
    }

    /**
     * 这里定义的是一个sum方法，它是用来计算两个整数的和的
     * 可以向里面传递两个参数，再将这两个参数相加
     * <p>
     * 这个方法定义了返回指
     *
     * @param a 加数
     * @param b 加数
     * @return 返回两个加数的和
     */
    public static int sum(int a, int b) {
        return a + b;
    }
}